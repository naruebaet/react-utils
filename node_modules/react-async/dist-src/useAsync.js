function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useCallback, useDebugValue, useEffect, useMemo, useRef, useReducer } from "react";
import globalScope from "./globalScope.js";
import { actionTypes, init, dispatchMiddleware, reducer as asyncReducer } from "./reducer.js";

const noop = () => {};

const useAsync = (arg1, arg2) => {
  const options = typeof arg1 === "function" ? _objectSpread({}, arg2, {
    promiseFn: arg1
  }) : arg1;
  const counter = useRef(0);
  const isMounted = useRef(true);
  const lastArgs = useRef(undefined);
  const lastOptions = useRef(undefined);
  const abortController = useRef({
    abort: noop
  });
  const {
    devToolsDispatcher
  } = globalScope.__REACT_ASYNC__;
  const {
    reducer,
    dispatcher = devToolsDispatcher
  } = options;
  const [state, _dispatch] = useReducer(reducer ? (state, action) => reducer(state, action, asyncReducer) : asyncReducer, options, init);
  const dispatch = dispatcher ? action => dispatcher(action, dispatchMiddleware(_dispatch), options) : dispatchMiddleware(_dispatch);

  const getMeta = meta => _objectSpread({
    counter: counter.current,
    debugLabel: options.debugLabel
  }, meta);

  const setData = (data, callback = noop) => {
    if (isMounted.current) {
      dispatch({
        type: actionTypes.fulfill,
        payload: data,
        meta: getMeta()
      });
      callback();
    }

    return data;
  };

  const setError = (error, callback = noop) => {
    if (isMounted.current) {
      dispatch({
        type: actionTypes.reject,
        payload: error,
        error: true,
        meta: getMeta()
      });
      callback();
    }

    return error;
  };

  const {
    onResolve,
    onReject
  } = options;

  const handleResolve = count => data => count === counter.current && setData(data, () => onResolve && onResolve(data));

  const handleReject = count => error => count === counter.current && setError(error, () => onReject && onReject(error));

  const start = promiseFn => {
    if ("AbortController" in globalScope) {
      abortController.current.abort();
      abortController.current = new globalScope.AbortController();
    }

    counter.current++;
    return new Promise((resolve, reject) => {
      if (!isMounted.current) return;

      const executor = () => promiseFn().then(resolve, reject);

      dispatch({
        type: actionTypes.start,
        payload: executor,
        meta: getMeta()
      });
    });
  };

  const {
    promise,
    promiseFn,
    initialValue
  } = options;

  const load = () => {
    if (promise) {
      return start(() => promise).then(handleResolve(counter.current), handleReject(counter.current));
    }

    const isPreInitialized = initialValue && counter.current === 0;

    if (promiseFn && !isPreInitialized) {
      return start(() => promiseFn(lastOptions.current, abortController.current)).then(handleResolve(counter.current), handleReject(counter.current));
    }
  };

  const {
    deferFn
  } = options;

  const run = (...args) => {
    if (deferFn) {
      lastArgs.current = args;
      return start(() => deferFn(args, lastOptions.current, abortController.current)).then(handleResolve(counter.current), handleReject(counter.current));
    }
  };

  const cancel = () => {
    options.onCancel && options.onCancel();
    counter.current++;
    abortController.current.abort();
    isMounted.current && dispatch({
      type: actionTypes.cancel,
      meta: getMeta()
    });
  };

  const {
    watch,
    watchFn
  } = options;
  useEffect(() => {
    if (watchFn && lastOptions.current && watchFn(options, lastOptions.current)) load();
  });
  useEffect(() => (lastOptions.current = options) && undefined);
  useEffect(() => {
    if (counter.current) cancel();
    if (promise || promiseFn) load();
  }, [promise, promiseFn, watch]);
  useEffect(() => () => isMounted.current = false, []);
  useEffect(() => () => cancel(), []);
  useDebugValue(state, ({
    status
  }) => `[${counter.current}] ${status}`);
  return useMemo(() => _objectSpread({}, state, {
    cancel,
    run,
    reload: () => lastArgs.current ? run(...lastArgs.current) : load(),
    setData,
    setError
  }), [state, deferFn, onResolve, onReject, dispatcher, reducer]);
};

const parseResponse = (accept, json) => res => {
  if (!res.ok) return Promise.reject(res);
  if (json === false) return res;
  if (json === true || accept === "application/json") return res.json();
  return res;
};

const useAsyncFetch = (input, init, _ref = {}) => {
  let {
    defer,
    json
  } = _ref,
      options = _objectWithoutProperties(_ref, ["defer", "json"]);

  const method = input.method || init && init.method;
  const headers = input.headers || init && init.headers || {};
  const accept = headers["Accept"] || headers["accept"] || headers.get && headers.get("accept");

  const doFetch = (input, init) => globalScope.fetch(input, init).then(parseResponse(accept, json));

  const isDefer = defer === true || ~["POST", "PUT", "PATCH", "DELETE"].indexOf(method);
  const fn = defer === false || !isDefer ? "promiseFn" : "deferFn";
  const state = useAsync(_objectSpread({}, options, {
    [fn]: useCallback((_, props, ctrl) => doFetch(input, _objectSpread({
      signal: ctrl ? ctrl.signal : props.signal
    }, init)), [JSON.stringify(input), JSON.stringify(init)])
  }));
  useDebugValue(state, ({
    counter,
    status
  }) => `[${counter}] ${status}`);
  return state;
};

const unsupported = () => {
  throw new Error("useAsync requires React v16.8 or up. Upgrade your React version or use the <Async> component instead.");
};

export default useEffect ? useAsync : unsupported;
export const useFetch = useEffect ? useAsyncFetch : unsupported;