'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

/**
 * Universal global scope object. In the browser this is `self`, in Node.js and React Native it's `global`.
 */
const globalScope = (() => {
  if (typeof self === "object" && self.self === self) return self;
  if (typeof global === "object" && global.global === global) return global;
  if (typeof global === "object" && global.GLOBAL === global) return global;
  return {}; // fallback that relies on imported modules to be singletons
})();
/**
 * Globally available object used to connect the DevTools to all React Async instances.
 */


globalScope.__REACT_ASYNC__ = globalScope.__REACT_ASYNC__ || {};

let PropTypes;

try {
  PropTypes = require("prop-types");
} catch (e) {}

const childrenFn = PropTypes && PropTypes.oneOfType([PropTypes.node, PropTypes.func]);
const stateObject = PropTypes && PropTypes.shape({
  initialValue: PropTypes.any,
  data: PropTypes.any,
  error: PropTypes.instanceOf(Error),
  value: PropTypes.any,
  startedAt: PropTypes.instanceOf(Date),
  finishedAt: PropTypes.instanceOf(Date),
  status: PropTypes.oneOf(["initial", "pending", "fulfilled", "rejected"]),
  isInitial: PropTypes.bool,
  isPending: PropTypes.bool,
  isLoading: PropTypes.bool,
  isFulfilled: PropTypes.bool,
  isResolved: PropTypes.bool,
  isRejected: PropTypes.bool,
  isSettled: PropTypes.bool,
  counter: PropTypes.number,
  cancel: PropTypes.func,
  run: PropTypes.func,
  reload: PropTypes.func,
  setData: PropTypes.func,
  setError: PropTypes.func
});
var propTypes = PropTypes && {
  Async: {
    children: childrenFn,
    promise: PropTypes.instanceOf(Promise),
    promiseFn: PropTypes.func,
    deferFn: PropTypes.func,
    watch: PropTypes.any,
    watchFn: PropTypes.func,
    initialValue: PropTypes.any,
    onResolve: PropTypes.func,
    onReject: PropTypes.func,
    reducer: PropTypes.func,
    dispatcher: PropTypes.func,
    debugLabel: PropTypes.string
  },
  Initial: {
    children: childrenFn.isRequired,
    state: stateObject.isRequired,
    persist: PropTypes.bool
  },
  Pending: {
    children: childrenFn.isRequired,
    state: stateObject.isRequired,
    initial: PropTypes.bool
  },
  Fulfilled: {
    children: childrenFn.isRequired,
    state: stateObject.isRequired,
    persist: PropTypes.bool
  },
  Rejected: {
    children: childrenFn.isRequired,
    state: stateObject.isRequired,
    persist: PropTypes.bool
  },
  Settled: {
    children: childrenFn.isRequired,
    state: stateObject.isRequired,
    persist: PropTypes.bool
  }
};

const nullify = children => children === undefined ? null : children;

const renderFn = (children, ...args) => nullify(typeof children === "function" ? children(...args) : children);
/**
 * Renders only when no promise has started or completed yet.
 *
 * @prop {Function|Node} children Function (passing state) or React node
 * @prop {Object} state React Async state object
 * @prop {boolean} persist Show until we have data, even while pending (loading) or when an error occurred
 */


const Initial = ({
  children,
  persist,
  state = {}
}) => state.isInitial || persist && !state.data ? renderFn(children, state) : null;
/**
 * Renders only while pending (promise is loading).
 *
 * @prop {Function|Node} children Function (passing state) or React node
 * @prop {Object} state React Async state object
 * @prop {boolean} initial Show only on initial load (data is undefined)
 */

const Pending = ({
  children,
  initial,
  state = {}
}) => state.isPending && (!initial || !state.value) ? renderFn(children, state) : null;
/**
 * Renders only when promise is resolved.
 *
 * @prop {Function|Node} children Function (passing data and state) or React node
 * @prop {Object} state React Async state object
 * @prop {boolean} persist Show old data while pending (promise is loading)
 */

const Fulfilled = ({
  children,
  persist,
  state = {}
}) => state.isFulfilled || persist && state.data ? renderFn(children, state.data, state) : null;
/**
 * Renders only when promise is rejected.
 *
 * @prop {Function|Node} children Function (passing error and state) or React node
 * @prop {Object} state React Async state object
 * @prop {boolean} persist Show old error while pending (promise is loading)
 */

const Rejected = ({
  children,
  persist,
  state = {}
}) => state.isRejected || persist && state.error ? renderFn(children, state.error, state) : null;
/**
 * Renders only when promise is fulfilled or rejected.
 *
 * @prop {Function|Node} children Function (passing state) or React node
 * @prop {Object} state React Async state object
 * @prop {boolean} persist Show old data or error while pending (promise is loading)
 */

const Settled = ({
  children,
  persist,
  state = {}
}) => state.isSettled || persist && state.value ? renderFn(children, state) : null;

if (propTypes) {
  Initial.propTypes = propTypes.Initial;
  Pending.propTypes = propTypes.Pending;
  Fulfilled.propTypes = propTypes.Fulfilled;
  Rejected.propTypes = propTypes.Rejected;
  Settled.propTypes = propTypes.Settled;
}

const statusTypes = {
  initial: "initial",
  pending: "pending",
  fulfilled: "fulfilled",
  rejected: "rejected"
};
const getInitialStatus = (value, promise) => {
  if (value instanceof Error) return statusTypes.rejected;
  if (value !== undefined) return statusTypes.fulfilled;
  if (promise) return statusTypes.pending;
  return statusTypes.initial;
};
const getIdleStatus = value => {
  if (value instanceof Error) return statusTypes.rejected;
  if (value !== undefined) return statusTypes.fulfilled;
  return statusTypes.initial;
};
const getStatusProps = status => ({
  status,
  isInitial: status === statusTypes.initial,
  isPending: status === statusTypes.pending,
  isLoading: status === statusTypes.pending,
  // alias
  isFulfilled: status === statusTypes.fulfilled,
  isResolved: status === statusTypes.fulfilled,
  // alias
  isRejected: status === statusTypes.rejected,
  isSettled: status === statusTypes.fulfilled || status === statusTypes.rejected
});

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    keys.push.apply(keys, Object.getOwnPropertySymbols(object));
  }

  if (enumerableOnly) keys = keys.filter(function (sym) {
    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
  });
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
const actionTypes = {
  start: "start",
  cancel: "cancel",
  fulfill: "fulfill",
  reject: "reject"
};
const init = ({
  initialValue,
  promise,
  promiseFn
}) => _objectSpread({
  initialValue,
  data: initialValue instanceof Error ? undefined : initialValue,
  error: initialValue instanceof Error ? initialValue : undefined,
  value: initialValue,
  startedAt: promise || promiseFn ? new Date() : undefined,
  finishedAt: initialValue ? new Date() : undefined
}, getStatusProps(getInitialStatus(initialValue, promise || promiseFn)), {
  counter: 0
});
const reducer = (state, {
  type,
  payload,
  meta
}) => {
  switch (type) {
    case actionTypes.start:
      return _objectSpread({}, state, {
        startedAt: new Date(),
        finishedAt: undefined
      }, getStatusProps(statusTypes.pending), {
        counter: meta.counter
      });

    case actionTypes.cancel:
      return _objectSpread({}, state, {
        startedAt: undefined,
        finishedAt: undefined
      }, getStatusProps(getIdleStatus(state.error || state.data)), {
        counter: meta.counter
      });

    case actionTypes.fulfill:
      return _objectSpread({}, state, {
        data: payload,
        value: payload,
        error: undefined,
        finishedAt: new Date()
      }, getStatusProps(statusTypes.fulfilled));

    case actionTypes.reject:
      return _objectSpread({}, state, {
        error: payload,
        value: payload,
        finishedAt: new Date()
      }, getStatusProps(statusTypes.rejected));

    default:
      return state;
  }
};
const dispatchMiddleware = dispatch => (action, ...args) => {
  dispatch(action, ...args);

  if (action.type === actionTypes.start && typeof action.payload === "function") {
    action.payload();
  }
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    keys.push.apply(keys, Object.getOwnPropertySymbols(object));
  }

  if (enumerableOnly) keys = keys.filter(function (sym) {
    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
  });
  return keys;
}

function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$1(source, true).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * createInstance allows you to create instances of Async that are bound to a specific promise.
 * A unique instance also uses its own React context for better nesting capability.
 */

const createInstance = (defaultProps = {}, displayName = "Async") => {
  const _React$createContext = React__default.createContext(),
        Consumer = _React$createContext.Consumer,
        Provider = _React$createContext.Provider;

  class Async extends React__default.Component {
    constructor(props) {
      super(props);
      this.start = this.start.bind(this);
      this.load = this.load.bind(this);
      this.run = this.run.bind(this);
      this.cancel = this.cancel.bind(this);
      this.onResolve = this.onResolve.bind(this);
      this.onReject = this.onReject.bind(this);
      this.setData = this.setData.bind(this);
      this.setError = this.setError.bind(this);
      const promise = props.promise;
      const promiseFn = props.promiseFn || defaultProps.promiseFn;
      const initialValue = props.initialValue || defaultProps.initialValue;
      this.mounted = false;
      this.counter = 0;
      this.args = [];
      this.abortController = {
        abort: () => {}
      };
      this.state = _objectSpread$1({}, init({
        initialValue,
        promise,
        promiseFn
      }), {
        cancel: this.cancel,
        run: this.run,
        reload: () => {
          this.load();
          this.run(...this.args);
        },
        setData: this.setData,
        setError: this.setError
      });
      this.debugLabel = props.debugLabel || defaultProps.debugLabel;
      const devToolsDispatcher = globalScope.__REACT_ASYNC__.devToolsDispatcher;

      const _reducer = props.reducer || defaultProps.reducer;

      const _dispatcher = props.dispatcher || defaultProps.dispatcher || devToolsDispatcher;

      const reducer$1 = _reducer ? (state, action) => _reducer(state, action, reducer) : reducer;
      const dispatch = dispatchMiddleware((action, callback) => {
        this.setState(state => reducer$1(state, action), callback);
      });
      this.dispatch = _dispatcher ? action => _dispatcher(action, dispatch, props) : dispatch;
    }

    componentDidMount() {
      this.mounted = true;

      if (this.props.promise || !this.state.initialValue) {
        this.load();
      }
    }

    componentDidUpdate(prevProps) {
      const _this$props = this.props,
            watch = _this$props.watch,
            _this$props$watchFn = _this$props.watchFn,
            watchFn = _this$props$watchFn === void 0 ? defaultProps.watchFn : _this$props$watchFn,
            promise = _this$props.promise,
            promiseFn = _this$props.promiseFn;

      if (watch !== prevProps.watch) {
        if (this.counter) this.cancel();
        return this.load();
      }

      if (watchFn && watchFn(_objectSpread$1({}, defaultProps, {}, this.props), _objectSpread$1({}, defaultProps, {}, prevProps))) {
        if (this.counter) this.cancel();
        return this.load();
      }

      if (promise !== prevProps.promise) {
        if (this.counter) this.cancel();
        if (promise) return this.load();
      }

      if (promiseFn !== prevProps.promiseFn) {
        if (this.counter) this.cancel();
        if (promiseFn) return this.load();
      }
    }

    componentWillUnmount() {
      this.cancel();
      this.mounted = false;
    }

    getMeta(meta) {
      return _objectSpread$1({
        counter: this.counter,
        debugLabel: this.debugLabel
      }, meta);
    }

    start(promiseFn) {
      if ("AbortController" in globalScope) {
        this.abortController.abort();
        this.abortController = new globalScope.AbortController();
      }

      this.counter++;
      return new Promise((resolve, reject) => {
        if (!this.mounted) return;

        const executor = () => promiseFn().then(resolve, reject);

        this.dispatch({
          type: actionTypes.start,
          payload: executor,
          meta: this.getMeta()
        });
      });
    }

    load() {
      const promise = this.props.promise;

      if (promise) {
        return this.start(() => promise).then(this.onResolve(this.counter), this.onReject(this.counter));
      }

      const promiseFn = this.props.promiseFn || defaultProps.promiseFn;

      if (promiseFn) {
        const props = _objectSpread$1({}, defaultProps, {}, this.props);

        return this.start(() => promiseFn(props, this.abortController)).then(this.onResolve(this.counter), this.onReject(this.counter));
      }
    }

    run(...args) {
      const deferFn = this.props.deferFn || defaultProps.deferFn;

      if (deferFn) {
        this.args = args;

        const props = _objectSpread$1({}, defaultProps, {}, this.props);

        return this.start(() => deferFn(args, props, this.abortController)).then(this.onResolve(this.counter), this.onReject(this.counter));
      }
    }

    cancel() {
      const onCancel = this.props.onCancel || defaultProps.onCancel;
      onCancel && onCancel();
      this.counter++;
      this.abortController.abort();
      this.mounted && this.dispatch({
        type: actionTypes.cancel,
        meta: this.getMeta()
      });
    }

    onResolve(counter) {
      return data => {
        if (this.counter === counter) {
          const onResolve = this.props.onResolve || defaultProps.onResolve;
          this.setData(data, () => onResolve && onResolve(data));
        }

        return data;
      };
    }

    onReject(counter) {
      return error => {
        if (this.counter === counter) {
          const onReject = this.props.onReject || defaultProps.onReject;
          this.setError(error, () => onReject && onReject(error));
        }

        return error;
      };
    }

    setData(data, callback) {
      this.mounted && this.dispatch({
        type: actionTypes.fulfill,
        payload: data,
        meta: this.getMeta()
      }, callback);
      return data;
    }

    setError(error, callback) {
      this.mounted && this.dispatch({
        type: actionTypes.reject,
        payload: error,
        error: true,
        meta: this.getMeta()
      }, callback);
      return error;
    }

    render() {
      const children = this.props.children;

      if (typeof children === "function") {
        return React__default.createElement(Provider, {
          value: this.state
        }, children(this.state));
      }

      if (children !== undefined && children !== null) {
        return React__default.createElement(Provider, {
          value: this.state
        }, children);
      }

      return null;
    }

  }

  if (propTypes) Async.propTypes = propTypes.Async;

  const AsyncInitial = props => React__default.createElement(Consumer, null, st => React__default.createElement(Initial, _extends({}, props, {
    state: st
  })));

  const AsyncPending = props => React__default.createElement(Consumer, null, st => React__default.createElement(Pending, _extends({}, props, {
    state: st
  })));

  const AsyncFulfilled = props => React__default.createElement(Consumer, null, st => React__default.createElement(Fulfilled, _extends({}, props, {
    state: st
  })));

  const AsyncRejected = props => React__default.createElement(Consumer, null, st => React__default.createElement(Rejected, _extends({}, props, {
    state: st
  })));

  const AsyncSettled = props => React__default.createElement(Consumer, null, st => React__default.createElement(Settled, _extends({}, props, {
    state: st
  })));

  AsyncInitial.displayName = `${displayName}.Initial`;
  AsyncPending.displayName = `${displayName}.Pending`;
  AsyncFulfilled.displayName = `${displayName}.Fulfilled`;
  AsyncRejected.displayName = `${displayName}.Rejected`;
  AsyncSettled.displayName = `${displayName}.Settled`;
  Async.displayName = displayName;
  Async.Initial = AsyncInitial;
  Async.Pending = AsyncPending;
  Async.Loading = AsyncPending; // alias

  Async.Fulfilled = AsyncFulfilled;
  Async.Resolved = AsyncFulfilled; // alias

  Async.Rejected = AsyncRejected;
  Async.Settled = AsyncSettled;
  return Async;
};
var Async = createInstance();

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    keys.push.apply(keys, Object.getOwnPropertySymbols(object));
  }

  if (enumerableOnly) keys = keys.filter(function (sym) {
    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
  });
  return keys;
}

function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$2(source, true).forEach(function (key) {
        _defineProperty$2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty$2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

const noop = () => {};

const useAsync = (arg1, arg2) => {
  const options = typeof arg1 === "function" ? _objectSpread$2({}, arg2, {
    promiseFn: arg1
  }) : arg1;
  const counter = React.useRef(0);
  const isMounted = React.useRef(true);
  const lastArgs = React.useRef(undefined);
  const lastOptions = React.useRef(undefined);
  const abortController = React.useRef({
    abort: noop
  });
  const devToolsDispatcher = globalScope.__REACT_ASYNC__.devToolsDispatcher;
  const reducer$1 = options.reducer,
        _options$dispatcher = options.dispatcher,
        dispatcher = _options$dispatcher === void 0 ? devToolsDispatcher : _options$dispatcher;

  const _useReducer = React.useReducer(reducer$1 ? (state, action) => reducer$1(state, action, reducer) : reducer, options, init),
        _useReducer2 = _slicedToArray(_useReducer, 2),
        state = _useReducer2[0],
        _dispatch = _useReducer2[1];

  const dispatch = dispatcher ? action => dispatcher(action, dispatchMiddleware(_dispatch), options) : dispatchMiddleware(_dispatch);

  const getMeta = meta => _objectSpread$2({
    counter: counter.current,
    debugLabel: options.debugLabel
  }, meta);

  const setData = (data, callback = noop) => {
    if (isMounted.current) {
      dispatch({
        type: actionTypes.fulfill,
        payload: data,
        meta: getMeta()
      });
      callback();
    }

    return data;
  };

  const setError = (error, callback = noop) => {
    if (isMounted.current) {
      dispatch({
        type: actionTypes.reject,
        payload: error,
        error: true,
        meta: getMeta()
      });
      callback();
    }

    return error;
  };

  const onResolve = options.onResolve,
        onReject = options.onReject;

  const handleResolve = count => data => count === counter.current && setData(data, () => onResolve && onResolve(data));

  const handleReject = count => error => count === counter.current && setError(error, () => onReject && onReject(error));

  const start = promiseFn => {
    if ("AbortController" in globalScope) {
      abortController.current.abort();
      abortController.current = new globalScope.AbortController();
    }

    counter.current++;
    return new Promise((resolve, reject) => {
      if (!isMounted.current) return;

      const executor = () => promiseFn().then(resolve, reject);

      dispatch({
        type: actionTypes.start,
        payload: executor,
        meta: getMeta()
      });
    });
  };

  const promise = options.promise,
        promiseFn = options.promiseFn,
        initialValue = options.initialValue;

  const load = () => {
    if (promise) {
      return start(() => promise).then(handleResolve(counter.current), handleReject(counter.current));
    }

    const isPreInitialized = initialValue && counter.current === 0;

    if (promiseFn && !isPreInitialized) {
      return start(() => promiseFn(lastOptions.current, abortController.current)).then(handleResolve(counter.current), handleReject(counter.current));
    }
  };

  const deferFn = options.deferFn;

  const run = (...args) => {
    if (deferFn) {
      lastArgs.current = args;
      return start(() => deferFn(args, lastOptions.current, abortController.current)).then(handleResolve(counter.current), handleReject(counter.current));
    }
  };

  const cancel = () => {
    options.onCancel && options.onCancel();
    counter.current++;
    abortController.current.abort();
    isMounted.current && dispatch({
      type: actionTypes.cancel,
      meta: getMeta()
    });
  };

  const watch = options.watch,
        watchFn = options.watchFn;
  React.useEffect(() => {
    if (watchFn && lastOptions.current && watchFn(options, lastOptions.current)) load();
  });
  React.useEffect(() => (lastOptions.current = options) && undefined);
  React.useEffect(() => {
    if (counter.current) cancel();
    if (promise || promiseFn) load();
  }, [promise, promiseFn, watch]);
  React.useEffect(() => () => isMounted.current = false, []);
  React.useEffect(() => () => cancel(), []);
  React.useDebugValue(state, ({
    status
  }) => `[${counter.current}] ${status}`);
  return React.useMemo(() => _objectSpread$2({}, state, {
    cancel,
    run,
    reload: () => lastArgs.current ? run(...lastArgs.current) : load(),
    setData,
    setError
  }), [state, deferFn, onResolve, onReject, dispatcher, reducer$1]);
};

const parseResponse = (accept, json) => res => {
  if (!res.ok) return Promise.reject(res);
  if (json === false) return res;
  if (json === true || accept === "application/json") return res.json();
  return res;
};

const useAsyncFetch = (input, init, _ref = {}) => {
  let defer = _ref.defer,
      json = _ref.json,
      options = _objectWithoutProperties(_ref, ["defer", "json"]);

  const method = input.method || init && init.method;
  const headers = input.headers || init && init.headers || {};
  const accept = headers["Accept"] || headers["accept"] || headers.get && headers.get("accept");

  const doFetch = (input, init) => globalScope.fetch(input, init).then(parseResponse(accept, json));

  const isDefer = defer === true || ~["POST", "PUT", "PATCH", "DELETE"].indexOf(method);
  const fn = defer === false || !isDefer ? "promiseFn" : "deferFn";
  const state = useAsync(_objectSpread$2({}, options, {
    [fn]: React.useCallback((_, props, ctrl) => doFetch(input, _objectSpread$2({
      signal: ctrl ? ctrl.signal : props.signal
    }, init)), [JSON.stringify(input), JSON.stringify(init)])
  }));
  React.useDebugValue(state, ({
    counter,
    status
  }) => `[${counter}] ${status}`);
  return state;
};

const unsupported = () => {
  throw new Error("useAsync requires React v16.8 or up. Upgrade your React version or use the <Async> component instead.");
};

var useAsync$1 = React.useEffect ? useAsync : unsupported;
const useFetch = React.useEffect ? useAsyncFetch : unsupported;

exports.Async = Async;
exports.Fulfilled = Fulfilled;
exports.Initial = Initial;
exports.Pending = Pending;
exports.Rejected = Rejected;
exports.Settled = Settled;
exports.actionTypes = actionTypes;
exports.createInstance = createInstance;
exports.default = Async;
exports.dispatchMiddleware = dispatchMiddleware;
exports.globalScope = globalScope;
exports.init = init;
exports.reducer = reducer;
exports.statusTypes = statusTypes;
exports.useAsync = useAsync$1;
exports.useFetch = useFetch;
